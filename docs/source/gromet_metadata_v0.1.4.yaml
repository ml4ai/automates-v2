openapi: 3.0.0

### NOTE 2022-08-05 CTM: Turning off Required attributes for now

info:
  title: GroMEt Metadata spec
  description: |
    Grounded Model Exchange (GroMEt) Metadata schema specification

    __Using Swagger to Generate Class Structure__

    To automatically generate Python or Java models corresponding to this
    document, you can use
    [swagger-codegen](https://swagger.io/tools/swagger-codegen/).
    We can use this to generate client code based off of this spec that
    will also generate the class structure.

    1. Install via the method described for your operating system
       [here](https://github.com/swagger-api/swagger-codegen#Prerequisites).
       Make sure to install a version after 3.0 that will support openapi 3.
    2. Run swagger-codegen with the options in the example below.
       The URL references where the yaml for this documentation is stored on
       github. Make sure to replace CURRENT_VERSION with the correct version.
       (The current version is `0.1.4`.)
       To generate Java classes rather, change the `-l python` to `-l java`.
       Change the value to the `-o` option to the desired output location.
       ```
       swagger-codegen generate -l python -o ./client -i https://raw.githubusercontent.com/ml4ai/automates-v2/master/docs/source/gromet_metadata_v{CURRENT_VERSION}.yaml
       ```
    3. Once it executes, the client code will be generated at your specified
       location.
       For python, the classes will be located in
       `$OUTPUT_PATH/swagger_client/models/`.
       For java, they will be located in
       `$OUTPUT_PATH/src/main/java/io/swagger/client/model/`

    If generating GroMEt Metadata schema data model classes in SKEMA (AutoMATES),
    then after generating the above, follow the instructions here:
    ```
    <automates>/automates/model_assembly/gromet/metadata/README.md
    ```

  contact:
    name: Clayton T. Morrison
    email: claytonm@arizona.edu
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  version: "0.1.4"

paths: {}

components:

  schemas:

    ### Metadata

    Metadata:
      description: |
        Root type of Metadata.
      properties:
#        gromet_src_id:
#          description: |
#            The identifier of the Gromet object within the GrometFNModule
#            that this metadata is associated with.
#          type: integer
        provenance:
          $ref: '#/components/schemas/Provenance'

    Provenance:
      description: Provenance of metadata.
#      required:
#        - method
#        - timestamp
      properties:
        method:
          description: |
            The inference method (with version) used to derive data.
          type: string
        timestamp:
          description: |
            Date and time that metadata was generated.
          type: string
          format: date-time

    ### LiteralValue (Same as GroMEt)

    LiteralValue:
      description: Literal Value.
      type: object
      properties:
        value_type:
          type: string
          description: The type of the value
        value:
          type: object
          description: |
            The value as an object representing the value.
            Interpret the value object according to the value_type.

    ### Equation extraction

    EquationExtraction:
      # title: <equation_extraction>
      description: Representation of equation extraction.
#      required:
#        - source_type
#        - document_reference_uid
#        - equation_number
      properties:
#        metadata_type:
#          type: string
#          default: "equation_extraction"
        source_type:
          type: string
          default: "equation_document_source"
        document_reference_uid:
          description: uid of the source DocumentReference
          type: string
        equation_number:
          description: Number of equation (relative to document source)
          type: integer

    ### Text extraction

    TextExtraction:
      # title: <text_extraction>
      description: |
        Representation of Text Extraction.
        Assumes COSMOS within-document reference coordinates to a span of text.
#      required:
##        - source_type
#        - document_reference_uid
#        - page
#        - block
#        - char_begin
#        - char_end
      properties:
#        metadata_type:
#          type: string
#          default: "text_extraction"
        document_reference_uid:
          description: uid of \<document_reference>
          type: string
        page:
          description: The COSMOS-assigned page number
          type: integer
        block:
          description: The COSMOS-extracted text block from the page
          type: integer
        char_begin:
          description: Character coordinate within a text block where span begins
          type: integer
        char_end:
          description: Character coordinate within a text block where span ends
          type: integer

    ### <ANY>.<code_span>

    SourceCodeReference:
      allOf:
        - $ref: '#/components/schemas/Metadata'
      title: <ANY>.SourceCodeReference
      description: |
        Reference to a source code span (sub-line, line, block).
#      required:
##        - code_type
#        - code_file_reference_uid
#        - line_begin
      properties:
        metadata_type:
          type: string
          default: "source_code_reference"
        code_file_reference_uid:
          description: uid for the source code file CodeFileReference
          type: string
          format: uuid
        line_begin:
          description: The line number where the identifier name string occurs
          type: integer
        line_end:
          description: The line number where the identifier name string occurs
          type: integer
        col_begin:
          description: The start column of the identifier name string instance
          type: integer
        col_end:
          description: The end column of the identifier name string instance
          type: integer

# Decision 2022-07-11: For now in GroMEt, any identifier name is used as the NAME of the GroMEt object
#    SourceCodeIdentifierName:
#      allOf:
#        - $ref: '#/components/schemas/Metadata'
#        title: <ANY>.SourceCodeIdentifierName
#        description: |
#          The original identifier name as it appears in the source code.
#          This will happen under these conditions:
#          (1) variable declaration and assignment to a variable => save to Port Output;
#          (2) function declaration => save to BoxFunction;
#          (3) function call => save to BoxFunction call box;
#          etc...
#        required:
#          - identifier_name
#        properties:
#          metadata_type:
#            type: string
#            default: "source_code_identifier_name"
#          identifier_name:
#            type: string

    SourceCodeDataType:
      allOf:
        - $ref: '#/components/schemas/Metadata'
      title: <BoxLiteralValue>.SourceCodeDataType
      description: |
        Information derived by Program Analysis inferring the literal value data type.
#      required:
#        - source_language
#        - source_language_version
#        - data_type
      properties:
        metadata_type:
          type: string
          default: "source_code_data_type"
        source_language:
          type: string
          description: |
            The source code language.
            E.g., "Python"
        source_language_version:
          type: string
          description: |
            The version of the source code language.
            E.g., "3.8" for Python 3.8
        data_type:
          type: string
          description: |
            The source code data type as named by the source language.
            E.g., "int_8", "Float64", etc...

    SourceCodeLoopInit:
      allOf:
        - $ref: '#/components/schemas/Metadata'
      title: <BoxLoop>.SourceCodeLoopInit
      description: |
        Provides bookkeeping to associate the initialization of a Loop
        (e.g., a for-loop), which may be specified outside of the loop,
        with the loop itself.
      properties:
        metadata_type:
          type: string
          default: "source_code_loop_init"
        source_language:
          type: string
          description: |
            The source code language.
            E.g., "Python"
        source_language_version:
          type: string
          description: |
            The version of the source code language.
            E.g., "3.8" for Python 3.8
        loop_name:
          type: string
          description: |
            The name of the loop that this initialization is associated with.
#        justification:
#          type: string
#          description: |
#            Represent the justification for why Program Analysis introduced this
#            initialization code.
#            For example, when processing a Python for-loop, this should be \"for_loop\"

    SourceCodeLoopUpdate:
      allOf:
        - $ref: '#/components/schemas/Metadata'
      title: <BoxLoop>.SourceCodeLoopUpdate
      description: |
        Provides bookkeeping to associate the update of a Loop parameter
        (e.g., the iterator variable in a for-loop), which may be specified
        within the body of the loop, but otherwise independent of the other
        computation within the loop body.
      properties:
        metadata_type:
          type: string
          default: "source_code_loop_update"
        source_language:
          type: string
          description: |
            The source code language.
            E.g., "Python"
        source_language_version:
          type: string
          description: |
            The version of the source code language.
            E.g., "3.8" for Python 3.8
        loop_name:
          type: string
          description: |
            The name of the loop that this initialization is associated with.
    #        justification:
    #          type: string
    #          description: |
    #            Represent the justification for why Program Analysis introduced this
    #            initialization code.
    #            For example, when processing a Python for-loop, this should be \"for_loop\"

    ### Gromet

    GrometCreation:
      allOf:
        - $ref: '#/components/schemas/Metadata'
      title: <GrometFNModule>.GrometCreation
      description: Metadata about the creation of a GroMEt JSON file
      properties:
        metadata_type:
          type: string
          default: "gromet_creation"
        gromet_version:
          type: string
          default: "0.1.2"  # Is there a way to get this by reference from info.version?
#        timestamp:
#          description: Creation timestamp
#          type: string
#          format: datetime

    SourceCodeCollection:
      allOf:
        - $ref: '#/components/schemas/Metadata'
      title: <GrometFNModule>.SourceCodeCollection
      description: Reference to a source code collection (e.g., a repository)
#      required:
#        - global_reference_id
#        - files
      properties:
        metadata_type:
          type: string
          default: "source_code_collection"
        name:
          description: Code Collection name
          type: string
        global_reference_id:
          description: >
            URL (e.g., GitHub url), or aske_id
          type: string
        files:
          type: array
          items:
            $ref: '#/components/schemas/CodeFileReference'

    CodeFileReference:
      # title: <code_file_reference>
      description: Reference to a specific file within a code collection
      properties:
        uid:
          description: uid for CodeFileReference
          type: string
        name:
          description: File name
          type: string
        path:
          description: File path, assume starting from root of code collection
          type: string

    TextualDocumentCollection:
      allOf:
        - $ref: '#/components/schemas/Metadata'
      title: <GrometFNModule>.TextualDocumentCollection
      description: >
        A collection of textual document references
        (e.g., documentation, scientific publication, etc.).
#      required:
#        - documents
      properties:
        metadata_type:
          type: string
          default: "textual_document_collection"
        documents:
          description: List of document references
          type: array
          items:
            $ref: '#/components/schemas/TextualDocumentReference'

    TextualDocumentReference:
      # title: <textual_document_reference>
      description: Document reference.
#      required:
#        - uid
#        - global_reference_id
      properties:
        uid:
          description: Unique identifier of the DocumentReference
          type: string
        global_reference_id:
          description: |
            Identifier of source document.<br>
            Rank preference of identifier type:<br>
            (1) DOI (digital object identifier) recognized by COSMOS<br>
            (2) PMID (Pubmed ID) or other DOI<br>
            (3) aske_id (ASKE unique identifier)
          type: string
        cosmos_id:
          description: ID of COSMOS component used to process document.
          type: string
        cosmos_version_number:
          description: Version number of COSMOS component.
          type: string
        skema_id:
          description: ID of SKEMA component used to process document.
          type: string
        skema_version_number:
          description: Version number of SKEMA component.
          type: string
        bibjson:
          description: The bibjson entry for this document.<br>
          $ref: '#/components/schemas/bibjson'

    bibjson:
      # title: <bibjson>
      description: See http://okfnlabs.org/bibjson/

    ### Functions

    EquationDefinition:
      allOf:
        - $ref: '#/components/schemas/Metadata'
      title: <ANY>.EquationDefinition
      description: >
        Association of an EquationExtraction with a GroMEt component
        (e.g., a GroMEt FN Function Box).
#      required:
#        - equation_extraction
      properties:
        metadata_type:
          type: string
          default: "equation_definition"
        equation_extraction:
          $ref: '#/components/schemas/EquationExtraction'
        equation_mathml_source:
          description: Source MathML of equation
          type: string
        equation_latex_source:
          description: Source LaTeX of equation
          type: string

    ### <variable>

    # variable_code_spans:
    #   allOf:
    #     - $ref: '#/components/schemas/metadata'
    #   title: <variable>.<code_spans>
    #   description: >
    #     host: \<variable> <br>
    #     Array of \<code_span>s for a \<variable> definition.
    #     A \<variable> instance index corresponds to the index in the code_spans array.
    #   required:
    #     - code_file_reference_uid
    #     - code_spans
    #   properties:
    #     type:
    #       default: "equation_parameter"
    #     code_file_reference_uid:
    #       description: uid for the source code file \<code_file_reference>
    #       type: string
    #       format: uuid
    #     code_spans:
    #       description: TODO
    #       type: array
    #       items:
    #         $ref: '#/components/schemas/code_span'

#    data_type:
#      allOf:
#        - $ref: '#/components/schemas/metadata'
#      title: <variable>.<data_type>
#      description: >
#        host: \<variable> <br>
#        Data type associated with \<variable>.
#      required:
#        - data_type
#      properties:
#        type:
#          default: "equation_parameter"
#        data_type:
#          description: >
#            Primitive data types:<br>
#            <em>Atomic</em>: \"BOOLEAN\", \"INTEGER\", \"FLOAT\", \"STRING\"<br>
#            <em>Compound</em>: \"SET\", \"SEQUENCE\", \"DICTIONARY\", \"COMPOSITE\"
#          type: string
#          enum: [ BOOLEAN, INTEGER, FLOAT, STRING, SET, SEQUENCE, DICTIONARY, COMPOSITE ]

    EquationParameter:
      allOf:
        - $ref: '#/components/schemas/Metadata'
      title: <PortOutput>.EquationParameter
      description: |
        Association of parameter values extracted from equations to host Port.
#      required:
#        - equation_extraction
#        - variable_identifier
#        - value
      properties:
        metadata_type:
          type: string
          default: "equation_parameter"
        equation_extraction:
          $ref: '#/components/schemas/EquationExtraction'
        variable_identifier:
          description: Variable identifier in equation
          type: string
        value:
          $ref: "#/components/schemas/LiteralValue"

    # Example: "attributes": { "text_identifier": "γ", "text_definition": "gamma" }
    TextDefinition:
      allOf:
        - $ref: '#/components/schemas/Metadata'
      title: <PortOutput>.TextDefinition
      description: |
        Definition of host derived from a text source.
#      required:
#        - text_extraction
#        - variable_identifier
#        - variable_definition
      properties:
        metadata_type:
          type: string
          default: "text_definition"
        text_extraction:
          $ref: '#/components/schemas/TextExtraction'
        variable_identifier:
          description: Variable identifier
          type: string
        variable_definition:
          description: Variable definition text
          type: string

    # are these test-based, or are they parameter-code-based ?
    TextParameter:
      allOf:
        - $ref: '#/components/schemas/Metadata'
      title: <PortOutput>.TextParameter
      description: |
        Association of parameter values extracted from text to host Port.
#      required:
#        - text_extraction
#        - variable_identifier
#        - value
      properties:
        metadata_type:
          type: string
          default: "text_parameter"
        text_extraction:
          $ref: '#/components/schemas/TextExtraction'
        variable_identifier:
          description: Variable identifier in text
          type: string
        value:
          $ref: "#/components/schemas/LiteralValue"

#    measurement_scale:
#      allOf:
#        - $ref: '#/components/schemas/metadata'
#      title: <variable>.<measurement_scale>
#      description: >
#        host: \<variable> <br>
#        The measurement scale of \<variable> value.<br>
#      required:
#        - measurement_scale
#      properties:
#        metadata_type:
#          default: "measurement_scale"
#        measurement_scale:
#          description: >
#            Values: \"binary\", \"categorical\", \"continuous\"
#          type: string
#          enum: [ BINARY, CATEGORICAL, CONTINUOUS ]

#    value_domain:
#      allOf:
#        - $ref: '#/components/schemas/metadata'
#      title: <variable>.<value_domain>
#      description: >
#        host: \<variable> <br>
#        Expression of the possible values data can take, as interval.<br>
#      required:
#        - value_domain
#      properties:
#        type:
#          default: "value_domain"
#        value_domain:
#          description: >
#            Example\: \"(and (> v -infty) (< v infty))\"
#          type: string

    ### <type>

#    type_alias:
#      allOf:
#        - $ref: '#/components/schemas/metadata'
#      title: <type>.<type_alias>
#      description: >
#        host: \<type>
#        Alias name of a \<type>. <br>
#        (E.g., using C typedef as alternate alias name to a \<type>).
#      required:
#        - alias
#      properties:
#        type:
#          default: "type_alias"
#        alias:
#          description: Alias name
#          type: string
