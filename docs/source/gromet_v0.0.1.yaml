openapi: 3.0.0

info:
  title: GroMEt JSON spec
  description: ASKE-E Grounded Model Exchange
  contact:
    name: Clayton T. Morrison
    email: claytonm@arizona.edu
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  version: 0.0.1

paths: {}

components:

  schemas:

    ### gromet

    gromet:
      title: <gromet>
      description: >
        Top-level GroMEt structure.
        A \<gromet> defines a namespace.
        \<gromet> may have metadata associated with it.
        Each \<gromet> will have its own JSON file.
      required:
        - uid
        - root_box
        - types
        - objects
        - variables
        - boxes
        - metadata
      properties:
        # id
        uid:
          description: Unique identifier
          type: string
          format: uid

        # Root box
        root_box:
          description: >
            uid for the top-level/root "entry point" to the GroMEt.
          type: string
          format: uid

        # Types
        types:
          description: Type definitions
          type: array
          items:
            $ref: '#/components/schemas/types'

        # Objects
        objects:
          description: Instances of types
          type: array
          items:
            $ref: '#/components/schemas/objects'

        # Variables
        variables: # node
          description: >
            Array of \<variable> definitions.
          type: array
          items:
            $ref: '#/components/schemas/variables'

        # Boxes
        boxes:  # hyperedge and subgraph
          description: >
            Array of \<box> definitions.
          type: array
          items:
            $ref: '#/components/schemas/boxes'

        # metadata
        metadata:
          description: Metadata associated with \<gromet>.
          type: array
          items:
            $ref: '#/components/schemas/metadata'

    ### Types

    types:
      oneOf:
        - $ref: '#/components/schemas/type'
        - $ref: '#/components/schemas/type__set'
        - $ref: '#/components/schemas/type__sequence'
        - $ref: '#/components/schemas/type__composite'
        - $ref: '#/components/schemas/type__dictionary'

    type:
      title: <type>
      description: Base type
      required:
        - uid
        - type
        - name
        - metatype
      properties:
        uid:
          description: Unique identifier.
          type: string
          format: uid
        type:
          description: The uid of the type that this \<type> extends
          type: string
          format: uid
        name:
          description: Name of the \<type>
          type: string
          default: "BaseType"
        metadata:
          description: Metadata associated with the \<type> declaration.
          type: array
          items:
            $ref: '#/components/schemas/metadata'

    type__set:
      allOf:
        - $ref: '#/components/schemas/type'
      title: <type>:<set>
      description: A set of elements.
      properties:
        name:
          type: string
          default: "Set"

    type__sequence:
      allOf:
        - $ref: '#/components/schemas/type'
      title: <type>:<sequence>
      description: A sequence of elements.
      properties:
        name:
          type: string
          default: "Sequence"

    type__composite:
      allOf:
        - $ref: '#/components/schemas/type'
      title: <type>:<composite>
      description: A structured type with named field attributes.
      required:
        - fields
      properties:
        name:
          type: string
          default: "Composite"
        fields:
          description: Array of named fields (named attributes).
          type: array
          items:
            $ref: '#/components/schemas/named_field'

    named_field:
      title: <named_field>
      description: >
        A named field, pairing the field name (string) with [optional]
        field value type name (string).
        When no type specified, the type name is null.
      required:
        - name
        - type_def
      properties:
        name:
          description: Name of the field.
          type: string
        type_def:
          description: uid of the definition for the \<type> of the field.
          type: string
          format: uid
        metadata:
          type: array
          description: Metadata associated with the \<object> instance.
          items:
            $ref: '#/components/schemas/metadata'

    type__dictionary:
      allOf:
        - $ref: '#/components/schemas/type'
      title: <type>:<dictionary>
      description: >
        Object with known keys
      properties:
        name:
          type: string
          default: "Dictionary"

    ### Literals

    # TODO:
    # Ontology for literal values
    # Define have literal_value string format for ontology ref.
    literal_value:
      title: <literal_value>
      description: A literal value.
      required:
        - gromet_type
        - value
      properties:
        gromet_type:
          description: The type of this gromet element
          type: string
          default: "Literal"
        value:
          description: The value
          type: string
          format: literal_value

    ### Objects

    objects:
      oneOf:
        - $ref: '#/components/schemas/object'
        - $ref: '#/components/schemas/object__set'
        - $ref: '#/components/schemas/object__sequence'
        - $ref: '#/components/schemas/object__composite'
        - $ref: '#/components/schemas/object__dictionary'

    object_ref:
      title: <object_ref>
      description: >
        An object reference.
        Enables values to be oneOf <object> or <literal_value>
      required:
        - gromet_type
        - object_def
      properties:
        gromet_type:
          description: The type of this GroMEt element
          type: string
          default: "ObjectRef"
        object_def:
          description: uid of the \<object> definition.
          type: string
          format: uid

    object:
      title: <object>
      description: >
        An object is an instance of a \<type> and may "evaluate" to a value.
      required:
        - uid
        - type
        - type_def
        - value
      properties:
        uid:
          description: Unique identifier.
          type: string
          format: uid
        type_def:
          description: uid of the definition of the \<object>'s \<type>.
          type: string
          format: uid
        value:
          # TODO: permits "object"-ifying a literal value
          description: >
            The literal value that an \<object> represents.<br>
            When Null, evaluates to the object itself.
          allOf:
            - $ref: '#/components/schemas/literal_value'
        metadata:
          type: array
          description: Metadata associated with the \<object> instance.
          items:
            $ref: '#/components/schemas/metadata'

    object__set:
      allOf:
        - $ref: '#/components/schemas/object'
      title: <object>:<set>
      description: >
        An instance of a \<type>:\<set> has 0 or more (unordered) elements (objects)
      properties:
        elements:
          description: The instance elements
          type: array
          items:
            # TODO: Should this be generalized to include anyting?
            oneOf:
              - $ref: '#/components/schemas/literal_value'
              - $ref: '#/components/schemas/objects'

    object__sequence:
      allOf:
        - $ref: '#/components/schemas/object__set'
      title: <object>:<sequence>
      description: >
        An instance of a \<type>:\<sequence>, where elements are ordered

    object__composite:
      allOf:
        - $ref: '#/components/schemas/object'
      title: <object>:<composite>
      description: >
        An object of a \<type>:\<composite> has fields that are "instantiated"
        (as persistent storage with associated values).
      properties:
        field_bindings:
          description: >
            Array of named fields paired with values (field_value).
            Used to represent associations of fields (composite) or
            keys (dictionary) with values. Values will be strings
            reprenting the uids of objects representing the value.
          type: array
          items:
            $ref: '#/components/schemas/field_binding'

    field_binding:
      title: <field_binding>
      description: Binding a value to a named field.
      required:
        - name
        - value
      properties:
        name:
          description: The name of the field.
          type: string
        value:
          description: >
            The value bound to the field.<br>
            Either a literal value or uid of an object_def
          oneOf:
            - $ref: '#/components/schemas/literal_value'
            - $ref: '#/components/schemas/object_ref'

    object__dictionary:
      allOf:
        - $ref: '#/components/schemas/object__composite'
      title: <object>:<dictionary>
      description: >
        An object instance of a \<type>:\<dictionary>.
      required:
        - known_keys
      properties:
        known_keys:
          description: Array of known keys (strings)
          type: array
          items:
            type: string

    ### Variables

    variables:
      oneOf:
        - $ref: '#/components/schemas/variable'

    variable:
      title: <variable>
      description: >
        A representation of a variable.<br>
        Include a denotational role: denote (represent) an aspect of the modeled domain.<br>
        A \<variable> can represent an abstraction by being associated with an
        \<object> (e.g., representing a set, array, struct).
      # Case 1: set of variables: e.g., defines an array;
      # Case 2: random variable: function->variable
      required:
        - uid
        - name
        - metadata
      properties:
        uid:
          description: Unique identifier.
          type: string
          format: uid
        name:
          description: >
            Variable basename.
            (When derived from source code, often corresponds to
            source code identifier.)
          type: string
        object_ref:
          description: >
            Used when the \<variable> is associated with an object.
            uid of the \<object> definition.
          type: string
          format: uid
        metadata:
          description: Metadata associated with the \<variable>.
          type: array
          items:
            $ref: '#/components/schemas/metadata'

    ### Boxes

    boxes:
      oneOf:
        - $ref: '#/components/schemas/box'
        - $ref: '#/components/schemas/box__relation'
        - $ref: '#/components/schemas/box__function'
        - $ref: '#/components/schemas/box__function__extract'
        - $ref: '#/components/schemas/box__function__pack'
        - $ref: '#/components/schemas/box__function__operator'
        - $ref: '#/components/schemas/box__function__decision'
        - $ref: '#/components/schemas/box__function__container'
        - $ref: '#/components/schemas/box__function__conditional'
        - $ref: '#/components/schemas/box__function__loop'
        - $ref: '#/components/schemas/box__function__predicate'

    box:
      title: <box>
      description: A box.
      required:
        - uid
        - type
        - metadata
      properties:
        uid:
          description: Unique identifier.
          type: string
          format: uid
        type:
          description: The type of \<box>
          type: string
          default: "Box"
        name:
          description: The name of the \<box>
          type: string
        wiring:
          description: Array of \<wiring>s "in" the \<box>
          type: array
          items:
            $ref: '#/components/schemas/wirings'
        metadata:
          type: array
          description: Metadata associated with the \<box>.
          items:
            $ref: '#/components/schemas/metadata'

    box__relation:
      allOf:
        - $ref: '#/components/schemas/box'
      title: <box>:<relation>
      description: A relation.
      properties:
        type:
          type: string
          default: "Relation"
        arguments:
          description: >
            Array of one or more uids for variables <em>within</em> the relation box.<br>
            Order of variables will match BOTH:<br>
            (1) The order of the parent \<hyper_edge> input variable uids<br>
            (2) The order of the inputs to the executable expression lambda function.
          type: array
          items:
            type: string
            format: uid

    box__function:
      allOf:
        - $ref: '#/components/schemas/box'
      title: <box>:<function>
      description: >
        A representation of a function (transforms state).
        A \<function> is wired by a directed hyperedge between \<variables>; a \<function> may also contain a subgraph (of a Function Network (FN)).
      properties:
        type:
          description: >
            The type of function being computed by this \<function> node.<br>
          type: string
          default: "Function"
        input_variables:
          description: >
            Array of zero or more uids for variables <em>within</em> the function box.<br>
            Order of variables will match BOTH:<br>
            (1) The order of the parent \<hyper_edge> input variable uids<br>
            (2) The order of the inputs to the executable expression lambda function.
          type: array
          items:
            type: string
            format: uid
        output_variables:
          description: >
            Array of zero or more uids for variables <em>within</em> the function box.<br>
            Order of variables will match BOTH:<br>
            (1) The order of the parent \<hyper_edge> output variable uids<br>
            (2) The order of the outputs in the return tuple of the executable expression lambda function.
          type: array
          items:
            type: string
            format: uid
        expression:
          description: >
            Executable expression.
            Stringified pythonic version of the lambda function code
          type: string

    box__function__extract:
      allOf:
        - $ref: '#/components/schemas/box__function'
      title: <function>:<extract>
      properties:
        type:
          type: string
          default: "Extract"

    box__function__pack:
      allOf:
        - $ref: '#/components/schemas/box__function'
      title: <function>:<pack>
      properties:
        type:
          type: string
          default: "Pack"

    box__function__operator:
      allOf:
        - $ref: '#/components/schemas/box__function'
      title: <function>:<operator>
      properties:
        type:
          type: string
          default: "Operator"

    box__function__assign:
      allOf:
        - $ref: '#/components/schemas/box__function'
      title: <function>:<assign>
      properties:
        type:
          type: string
          default: "Assign"

    box__function__decision:
      allOf:
        - $ref: '#/components/schemas/box__function'
      title: <function>:<decision>
      properties:
        type:
          type: string
          default: "Decision"

    box__function__container:
      allOf:
        - $ref: '#/components/schemas/box__function'
      title: <function>:<container>
      properties:
        type:
          type: string
          default: "Container"

    box__function__conditional:
      allOf:
        - $ref: '#/components/schemas/box__function'
      title: <function>:<conditional>
      properties:
        type:
          type: string
          default: "Conditional"

    box__function__loop:
      allOf:
        - $ref: '#/components/schemas/box__function'
      title: <function>:<loop>
      description: A function that loops.
      properties:
        type:
          type: string
          default: "Loop"
        exit_condition:
          description: The predicate that represents the exit condition.
          allOf:
            - $ref: '#/components/schemas/box__function__predicate'
        exit_expression:
          description: >
            Only used in loop type.
            Stringified pythonic version of the lambda function code that computes the exit condition.
          type: string

    box__function__predicate:
      allOf:
        - $ref: '#/components/schemas/box__function'
      title: <function>:<predicate>
      description: >
        A representation of a predicate (truth-valued function)
      properties:
        type:
          type: string
          default: "Predicate"
        expression:
          description: >
            Executable expression that returns a truth value.
            Stringified pythonic version of the lambda function code.

    ### Wirings

    wirings:
      oneOf:
        - $ref: '#/components/schemas/wiring'
        - $ref: '#/components/schemas/wiring__directed'

    wiring:
      title: <wiring>
      description: Top-level wiring
      required:
        - uid
        - type
      properties:
        uid:
          description: Unique identifier.
          type: string
          format: uid
        type:
          type: string
          default: "Wiring"

    wiring__directed:
      allOf:
        - $ref: '#/components/schemas/wiring'
      title: <wiring>:<directed>
      description: Function Network directed hyper edge
      required:
        - input_variables
        - box_uid
        - output_variables
      properties:
        type:
          type: string
          default: "Directed"
        input_variables:
          description: Array of uids for all input \<variable>s
          type: array
          items:
            type: string
            format: uid
        box_uid:
          description: uid of \<box>
          type: string
          format: uid
        output_variables:
          description: Array of uids for all output \<variable>s
          type: array
          items:
            type: string
            format: uid

    ### metadata

    metadata:
      title: <metadata>
      description: >
        Typed metadata.
        \<gromet> is grounded through metadata.


    ### gromet_collection

    gromet_collection:
      title: <gromet_collection>
      description: >
        A collection of 1 or more \<gromet>s.
        \<node_set>s denote arbitrary subsets of a \<gromet>.
        A collection with an \<alignment> will have at least two \<gromet>s.
        Each \<gromet_collection> will have its own JSON file.
      required:
        - gromets
      properties:
        gromets:
          description: Array of \<gromet> ids.
          type: array
          items:
            type: string
            format: uid
        alignments:
          type: array
          items:
            $ref: '#/components/schemas/alignment'
        node_sets:
          type: array
          items:
            $ref: '#/components/schemas/node_set'

    alignment:
      title: <alignment>
      description: >
        A mapping of elements (node_ids or \<node_sets>)
        from one \<gromet> (gromet_1) to another (gromet_2).
        The elements in the map are paired by their array index.
      required:
          - gromet_1
          - gromet_1_elements
          - gromet_2
          - gromet_2_elements
      properties:
        gromet_1:
          description: uid for <gromet> source 1
          type: string  # gromet_id
          format: uid
        gromet_1_elements:
          description: Array of uids for node_id or node_set_id from \<gromet> source 1
          type: array
          items:
            type: string # node_id or node_set_id
            format: uid
        gromet_2:
          description: gromet_id for \<gromet> source 2
          type: string  # gromet_id
          format: uid
        gromet_2_elements:
          description: Array of uids for node_id or node_set_id from \<gromet> source 2
          type: array
          items:
            type: string # node_id or node_set_id
            format: uid

    node_set:
      title: <node_set>
      description: >
        A collection of GroMEt node_ids from a source \<gromet>,
        used to denote to an arbitrary subset of the GroMEt.
        A \<node_set> may have metadata associated with it.
      required:
        - node_set_id
        - gromet_id
        - nodes
      properties:
        node_set_id:
          description: Unique identifier.
          type: string
          format: uid
        gromet_id:
          description: The uid of the source \<gromet>.
          type: string
          format: uid
        nodes:
          description: >
            Array of uids representing \<variable> and/or \<function> nodes.
          type: array
          items:
            type: string
            format: uid
        metadata:
          description: Metadata associated with the \<node_set>.
          type: array
          items:
            $ref: '#/components/schemas/metadata'
