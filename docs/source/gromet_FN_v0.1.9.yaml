openapi: 3.0.0

info:
  title: "Grounded Model Exchange (GroMEt) schema for Function Networks"
  description: |
    This document defines the GroMEt Function Network data model.
    Note that Metadata is defined in separate spec.

    __Using Swagger to Generate Class Structure__

    To automatically generate Python or Java models corresponding to this
    document, you can use
    [swagger-codegen](https://swagger.io/tools/swagger-codegen/).
    This can be used to generate the client code based off of this spec,
    and in the process this will generate the data model class structure.

    1. Install via the method described for your operating system
       [here](https://github.com/swagger-api/swagger-codegen#Prerequisites).
       Make sure to install a version after 3.0 that will support openapi 3.
    2. Run swagger-codegen with the options in the example below.
       The URL references where the yaml for this documentation is stored on
       github. Make sure to replace CURRENT_VERSION with the correct version.
       (The current version is `0.1.7`.)
       To generate Java classes rather, change the `-l python` to `-l java`.
       Change the value to the `-o` option to the desired output location.
       ```
       swagger-codegen generate -l python -o ./client -i https://raw.githubusercontent.com/ml4ai/automates-v2/master/docs/source/gromet_FN_v{CURRENT_VERSION}.yaml
       ```
    3. Once it executes, the client code will be generated at your specified
       location.
       For python, the classes will be located in
       `$OUTPUT_PATH/swagger_client/models/`.
       For java, they will be located in
       `$OUTPUT_PATH/src/main/java/io/swagger/client/model/`

    If generating GroMEt schema data model classes in SKEMA (AutoMATES), then
    after generating the above, follow the instructions here:
    ```
    <automates>/automates/model_assembly/gromet/model/README.md
    ```

  contact:
    name: Clayton T. Morrison
    email: claytonm@arizona.edu
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  version: "0.1.9"

paths: {}

components:

  schemas:

    Metadata:
      description: |
        Placeholder for the Metadata schema
        (as defined in gromet_metadata_v{VERSION_NUMBER}.yaml).
      type: object

    GrometObject:
      description: Generic base class for any GroMEt object
      type: object
      properties:
#        id:
#          description: An integer representing an identifier that is unique within the GrometFNModule.
#          type: integer
        metadata:
          description: Index (integer) into the metadata_collection table in GrometFNModule.
          type: integer

    TypedValue:
      description: Typed object (to label value types in JSON).
      type: object
      properties:
        type:
          type: string
          description: The type of the value.
        value:
          type: object

        # Currently used for dev, possibly eventually remove, or keep if larger purpose.
        index:
          type: integer
          description: Helper bookkeeping to facilitate keeping track of large list of TypedValues

        # Place at end of properties so __init__ fn preserves positional arguments
        gromet_type:
          type: string
          default: "TypedValue"

#    AttributeType:   # Was previously called GrometType
#      type: string
#      enum:
#        - FN      # A Function Network
#        - IMPORT  # Import object

    GrometFNModuleCollection:
      description: |
        A collection of GroMEt FN Modules.
        (Used to represent a multi-module system.)
      allOf:
        - $ref: "#/components/schemas/GrometObject"
      properties:
        schema:
          type: string
          default: "FN"
        schema_version:
          type: string
          default:
            $ref: "#/info/version"
        name:
          type: string
          description: |
            The name of the collection, e.g., the name of the multi-module system.
        modules:
          type: array
          items:
            $ref: "#/components/schemas/GrometFNModule"
        module_index:
          description: |
            The index of module path names (strings) with the index to the
            GrometFNModule in the modules table.
            Because this is a bijection, the module path names are represented
            as an array of strings, where the order in the array is the index
            into the modules table.
          type: array
          items:
            type: string
        executables:
          description: |
            Array of indices into the modules table to denote GrometFNModules
            that have a main function (and are executable).
          type: array
          items:
            type: integer
        metadata_collection:
          description: |
            Table (array) of lists (arrays) of metadata,
            where each list in the Table-array represents the collection
            of metadata associated with a GrometFNModuleCollection object.
          type: array  # The Table of metadata_collection(s) (lists)
          items:
            type: array  # Collection (list) of metadata associated with a particular GroMEt object.
            items:
              $ref: "#/components/schemas/Metadata"

        # Place at end of properties so __init__ fn preserves positional arguments
        gromet_type:
          type: string
          default: "GrometFNModuleCollection"

    GrometFNModule:
      description: |
        A GroMEt FN Module.
        (A Module corresponds to a namespace.)
        When derived from a source program, the FN is typically decomposed into a
        hierarchical structure of FNs,
        with a root GrometFN (that has a Module Outer Box) that will be assigned to
        the `fn` attribute of the GrometFNModule, and then has an array of `attributes`
        that are either themselves GrometFNs (the represent the types, functions,
        and variable-bound values, defined within the module) or imported elements.
      allOf:
        - $ref: "#/components/schemas/GrometObject"
      properties:
        schema:
          type: string
          default: "FN"
        schema_version:
          type: string
          default:
            $ref: "#/info/version"
        name:
          type: string
          description: |
            The name of the Function Network Module.
        fn:   # the "top level" Function Network (acset)
          $ref: "#/components/schemas/GrometFN"
        fn_array:  # previously attributes, as these are acset storage
          # SUM TYPE {"type": {"FN", "IMPORT"}, "value": {object}}
          description: |
            Array of GrometFNs
#            (sum-type) Array of TypedValues. Currently expect:<br>
#            (1) other GrometFN (type = "FN")<br>
#            (2) references to ImportReference (type = "IMPORT")
          type: array
          items:
            $ref: "#/components/schemas/GrometFN"  # TypedValue
        metadata_collection:
          description: |
            Table (array) of lists (arrays) of metadata,
            where each list in the Table-array represents the collection
            of metadata associated with a GrometFNModule object.
          type: array  # The Table of metadata_collection(s) (lists)
          items:
            type: array  # Collection (list) of metadata associated with a particular GroMEt object.
            items:
              $ref: "#/components/schemas/Metadata"

        # Place at end of properties so __init__ fn preserves positional arguments
        gromet_type:
          type: string
          default: "GrometFNModule"

    GrometFN:
      description: |
        A Function Network (FN).
      allOf:
        - $ref: "#/components/schemas/GrometObject"
      properties:

        name:
          type: string
          description: |
            The name of the Function Network

        # Outer Box
        b:
          type: array
          description: |
            b: The FN Outer Box (although not enforced, there is always only 1).
          items:
            $ref: "#/components/schemas/GrometBoxFunction"
        opi:
          type: array
          description: |
            opi: The Outer Port Inputs of the FN Outer Box (b)
          items:
            $ref: "#/components/schemas/GrometPort"
        opo:
          type: array
          description: |
            opo: The Outer Port Outputs of the FN Outer Box (b)
          items:
            $ref: "#/components/schemas/GrometPort"
        wopio:
          type: array
          description: |
            wopio: The Wires
            from (src) Outer Box Outer Port Inputs (opi)
            to (tgt) Outer Box Outer Port Outputs (opo).
            (AKA: Passthrough.)
          items:
            $ref: "#/components/schemas/GrometWire"

        # Functions
        bf:
          type: array
          description: |
            bf: The GrometBoxFunctions within this GrometFN.
          items:
            $ref: "#/components/schemas/GrometBoxFunction"
        pif:
          type: array
          description: |
            pif: The Port Inputs of the GrometBoxFunctions (bf).
          items:
            $ref: "#/components/schemas/GrometPort"
        pof:
          type: array
          description: |
            pof: The Port Outputs of the GrometBoxFunctions (bf).
          items:
            $ref: "#/components/schemas/GrometPort"
        wfopi:
          type: array
          description: |
            wfopi: The Wires
            from (src) GrometBoxFunctions Port Inputs (pif)
            to (tgt) Outer Box Outer Port Inputs (opi).
          items:
            $ref: "#/components/schemas/GrometWire"
        wfl:
          type: array
          description: |
            wfl: The Wires
            from (src) GrometBoxLoops Port Inputs (pil)
            to (tgt) GrometBoxFunctions Port Outputs (pof).
          items:
            $ref: "#/components/schemas/GrometWire"
        wff:
          type: array
          description: |
            wff: The Wires
            from (src) GrometBoxFunctions Port Inputs (pif)
            to (tgt) GrometBoxFunctions Port Outputs (pof).
          items:
            $ref: "#/components/schemas/GrometWire"
        wfc:
          type: array
          description: |
            wfc: The Wires
            from (src) GrometBoxConditionals Port Inputs (pic)
            to (tgt) GrometBoxFunctions Port Outputs (pof).
          items:
            $ref: "#/components/schemas/GrometWire"
        wfopo:
          type: array
          description: |
            wfopo: The Wires
            from (src) Outer Box Outer Port Outputs (opo)
            to (tgt) GrometBoxFunctions Port Outputs (pof).
          items:
            $ref: "#/components/schemas/GrometWire"

        # Loops
        bl:
          type: array
          description: |
            bl: The FN GrometBoxLoops within this GrometFN.
          items:
            $ref: "#/components/schemas/GrometBoxLoop"
        pil:
          type: array
          description: |
            pil: The Port Inputs of the GrometBoxLoops (bl)
          items:
            $ref: "#/components/schemas/GrometPort"
        pol:
          type: array
          description: |
            pol: The Port Outputs of the GrometBoxLoops (bl)
          items:
            $ref: "#/components/schemas/GrometPort"
        wlopi:
          type: array
          description: |
            wlopi: The Wires
            from (src) GrometBoxLoops Port Inputs (pil)
            to (tgt) the Outer Box Outer Port Inputs (opi).
          items:
            $ref: "#/components/schemas/GrometWire"
        wll:
          type: array
          description: |
            wll: The Wires
            from (src) the GrometBoxLoops Port Inputs (pil)
            to (tgt) the GrometBoxLoops Port Outputs (pol).
          items:
            $ref: "#/components/schemas/GrometWire"
        wlf:
          type: array
          description: |
            wlf: The Wires
            from (src) the GrometBoxFunctions Port Inputs (pif)
            to (tgt) the GrometBoxLoops Port Outputs (pol).
          items:
            $ref: "#/components/schemas/GrometWire"
        wlc:
          type: array
          description: |
            wlc: The Wires
            from (src) the GrometBoxConditionals Port Inputs (pic)
            to (tgt) the GrometBoxLoops Port Outputs (pol).
          items:
            $ref: "#/components/schemas/GrometWire"
        wlopo:
          type: array
          description: |
            wlopo: The Wires
            from (src) Outer Box Outer Port Outputs (opo)
            to (tgt) GrometBoxLoops Port Outputs (pol).
          items:
            $ref: "#/components/schemas/GrometWire"

        # Conditionals
        bc:
          type: array
          description: |
            bc: The FN GrometBoxConditionals within this GrometFN.
          items:
            $ref: "#/components/schemas/GrometBoxConditional"
        pic:
          type: array
          description: |
            pic: The Port Inputs of the GrometBoxConditionals (bc)
          items:
            $ref: "#/components/schemas/GrometPort"
        poc:
          type: array
          description: |
            poc: The Port Outputs of the GrometBoxConditionals (bc)
          items:
            $ref: "#/components/schemas/GrometPort"
        wcopi:
          type: array
          description: |
            wcopi: The Wires
            from (src) the GrometBoxConditionals Port Inputs (pic)
            to (tgt) the Outer Box Outer Port Inputs (opi).
          items:
            $ref: "#/components/schemas/GrometWire"
        wcl:
          type: array
          description: |
            wcl: The Wires
            from (src) the GrometBoxLoops Port Inputs (pil)
            to (tgt) the GrometBoxConditionals Port Outputs (poc).
          items:
            $ref: "#/components/schemas/GrometWire"
        wcf:
          type: array
          description: |
            wcf: The Wires
            from (src) the GrometBoxFunctions Port Inputs (pif)
            to (tgt) the GrometBoxConditionals Port Outputs (poc).
          items:
            $ref: "#/components/schemas/GrometWire"
        wcc:
          type: array
          description: |
            wcc: The Wires
            from (src) the GrometBoxConditionals Port Inputs (pic)
            to (tgt) the GrometBoxConditionals Port Outputs (poc).
          items:
            $ref: "#/components/schemas/GrometWire"
        wcopo:
          type: array
          description: |
            wcopo: The Wires
            from (src) the Outer Box Outer Port Outputs (opo)
            to (tgt) the GrometBoxConditionals Port Outputs (poc).
          items:
            $ref: "#/components/schemas/GrometWire"

        # Place at end of properties so __init__ fn preserves positional arguments
        gromet_type:
          type: string
          default: "GrometFN"

    GrometWire:
      description: FN Wire
      allOf:
        - $ref: "#/components/schemas/GrometObject"
      properties:
        name:
          type: string
        src:
          description: Index to the source Port of the Wire.
          type: integer
        tgt:
          description: Index to the target Port of the Wire.
          type: integer

        # Place at end of properties so __init__ fn preserves positional arguments
        gromet_type:
          type: string
          default: "GrometWire"

    GrometPort:
      description: |
        FN Port.
        The default_value of the Port (optional) will be
          a LiteralValue;
          E.g., for the outer input Port (opi) on a
            Function Box, this can be used to represent
            declared default values of function arguments.
      allOf:
        - $ref: "#/components/schemas/GrometObject"
      properties:
        id:
          type: integer
          description: |
            The Port id is a natural number that represent the order of the Port on the Box.
            This enables the following:
            (1) BoxFunctions with FN context will be able to unambiguously match the "calling"
            BoxFunction Port Inputs (pif) (and Port Outputs, pof) to their corresponding
            Outer Port Inputs (opi) (and Outer Port Outputs, opo) based in the ordering of the
            ids of each Port.
            (2) Loop Port Input (pil) id ordering will match the Loop Port Output (pol) as well
            as the ordering of the Port Inputs and Port Outputs of the calling loop body Function.
        name:
          type: string
        box:
          # $ref: "#/components/schemas/GrometBox"
          description: |
            Index to the Box that the Port belongs to.
          type: integer
        default_value:
          # description: |
          #   Default value of the Port.
          #   E.g., for the outer input Port (opi) on a Function Box, this can be
          #   used to represent declared default values of function arguments.
          $ref: "#/components/schemas/LiteralValue"
          # TODO: needs to be generalized if default value references other var (global)

        # Place at end of properties so __init__ fn preserves positional arguments
        gromet_type:
          type: string
          default: "GrometPort"

    GrometBox:
      description: |
        FN Box
      allOf:
        - $ref: "#/components/schemas/GrometObject"
      properties:
        name:
          type: string

    FunctionType:
      type: string
      enum:
        - FUNCTION    # Function with any number of input and output Ports and FN contents.
        - EXPRESSION  # Function with single return value (Port)
        - PREDICATE   # Expression whose return value (Port) is Boolean
        - MODULE      # Function with no Outer Ports (no contents)
        - ABSTRACT    # Primitive Function (no contents): GrometFN primitive, for abstracting in model role analysis
        - LABEL       # Primitive Function (no contents) that represents a label
        - GOTO        # Function (with contents) that represents a generalized computed Goto: body output ports always includes: fn_idx (int) and label (string)
        - LANGUAGE_PRIMITIVE  # Primitive Function (no contents): source language primitives
        - IMPORTED    # Function (no contents) imported from another module
        - IMPORTED_METHOD  # A method call on an object derived from and imported module.
        - UNKNOWN_METHOD  # A method that may have already been defined OR is IMPORTED_METHOD
        - LITERAL     # Function LiteralValue with single return value (Port) and a value (no contents)

    ImportType:
      description: The type of source of an IMPORTED resource
      type: string
      enum:
        - GROMET_FN_MODULE  # Importing another GrometFNModule; SourceType is Gromet File
        - NATIVE            # Reference to native language library (e.g., Python 3.10 argparse, sys, etc...)
        - OTHER             # Importing from some other source.

    ImportSourceType:
      description: |
        When a resource is imported, this is the type of source object that imported URI references.
      type: string
      enum:
        - GROMET            # Reference to a GroMEt file.
        - SOURCE_FILE       # Reference to specific file (direct file URL), e.g.: "https://raw.githubusercontent.com/CodeForPhilly/chime/develop/src/penn_chime/model/sir.py"
        - REPOSITORY        # Reference to repository (top-level repository URL), e.g.,: "https://github.com/CodeForPhilly/chime"
        - WEB               # Reference to a common library URL, but not the direct repository (URI to library url)

# Example of Function of type ABSTRACT
# (0) Primitive GroMEt function set
#     {"name": "set",
#      "contents": None,
#      "function_type": "ABSTRACT",
#      "import_type": None,
#      "import_version": None,
#      "import_source": None,
#      "source_language": None,
#      "source_language_version": None,
#      "value": None}

# Example of Function of type LANGUAGE_PRIMITIVE
# (0) Built-in Python function str()
#     {"name": "str",
#      "contents": None,
#      "function_type": "LANGUAGE_PRIMITIVE",
#      "import_type": None,
#      "import_version": None,
#      "import_source": None,
#      "source_language": "Python",
#      "source_language_version": "3.10",
#      "value": None}

# Examples of Function of type IMPORTED
# (0) GROMET_FN_MODULE: Existing GrometFNModule
#     {"name": "model.sir.get_growth_rate: <index_to_FN_in_GrometFNModule_attributes_array>",
#      "contents": None,
#      "function_type": "IMPORTED",
#      "import_type": "GROMET_FN_MODULE",
#      "import_version": "CHIME penn... 2020-...",
#      "import_source": {"type": "GROMET", "value": "<location of GrometFNModuleCollection JSON>: <index_of_module_in_collection>"},
#      "source_language": "Python",
#      "source_language_version": "3.10",
#      "value": None}
# (1) NATIVE: importing a function from a native Python library
#     {"name": "sys.exit",f  # <module_name>.<function_name>
#      "contents": None,
#      "function_type": "IMPORTED",
#      "import_type": "NATIVE",
#      "import_version": None,  # Here, the import_version is redundant to source_language_version
#      "import_source": None,  # URI redundant to source_language -- assumed to be known
#      "source_language": "Python",
#      "source_language_version": "3.10",
#      "value": None}
# (2) OTHER: importing a function from another library
#     {"name": "numpy.concatenate",  # <module_name>.<function_name>
#      "contents": None,
#      "function_type": "IMPORTED",
#      "import_type": "OTHER",
#      "import_version": "Numpy 1.23.0",
#      "import_source": {"type": "WEB", "value": "https://numpy.org/"},
#      "source_language": "Python",
#      "source_language_version": "3.10",
#      "value": None}

# Example of Function of type IMPORTED_METHOD
#"""
#import numpy
#
#arr = numpy.array([1,2,3])
#m = arr.mean()
#
#### gets roughly translated to a FN function call, where arr is an argument
#mean(arr)
#
#### get module name:
#type(arr).__module__
#### get class name:
#type(arr).__name__
#"""
# (0) function call to numpy.ndarray.mean()
#     {"name": "numpy.ndarray.mean",   # <module>.<class_name>.<method_name>
#      "contents": None,
#      "function_type": "IMPORTED_METHOD",
#      "import_type": "OTHER",
#      "import_version": "Numpy 1.23.0",
#      "import_source": {"type": "WEB", "value": "https://numpy.org/"},
#      "source_language": "Python",
#      "source_language_version": "3.10",
#      "value": None}

    LiteralValue:
      description: |
        Literal Value.
        Supports representation of identifiers to refer to GrometFN components
          via value_type as "literal_function_defined" or "literal_function_imported".
        When **value_type** is "literal_function_defined" or "literal_function_imported",
          then the **value** will be a string representing the (qualified) function name.
          (When imported, the qualified function name includes the module path.)
          Also **source_language** and **source_language_version** will be filled in.
        When **value_type** is "literal_function_defined":
          then the **source_fn** also will be filled in.
        When **value_type** is "literal_function_defined":
          then the **import_type**, **import_version**, **import_source**,
          also will be filled in.
      type: object

      properties:

        value_type:
          type: string
          description: |
            The type of the value.

        value:
          type: object
          description: |
            The value as an object representing the value.
            Interpret the value object according to the value_type.

        # When LiteralValue value_type is "literal_function_defined"
        source_fn:
          description: |
            Integer representing index into the fn_array
          type: integer

        # When LiteralValue value_type is "literal_function_imported"
        import_type:
          description: |
            When value_type is "literal_function_imported":
            the type of the import
          $ref: "#/components/schemas/ImportType"
        import_version:
          description: |
            When value_type is "literal_function_imported":
            the version of the resource being imported (e.g., "Numpy 1.23.0")
          type: string
        import_source:
          description: |
            When value_type is "literal_function_imported":
            A TypedValue that enables labeling what type of source the import_source refers to.
            The "type" is one of ImportSourceType, "value" is string representing the URI.
          $ref: "#/components/schemas/TypedValue"

        # When LiteralValue value_type is "literal_function_defined" or "literal_function_defined"
        source_language:
          description: |
            When function_type is SOURCE or IMPORTED: The source language base name (e.g., "Python", "C", "Fortran")
          type: string
        source_language_version:
          description: |
            When function_type is SOURCE or IMPORTED: The version of the source language (e.g., "3.10.9")
          type: string

        # Place at end of properties so __init__ fn preserves positional arguments
        gromet_type:
          type: string
          default: "LiteralValue"

    GrometBoxFunction:
      description: |
        FN Box Function.
        The interpretation of the attributes (properties) depends on the function_type, as follows:
        - FUNCTION : Function with any number of input and output Ports and FN contents.
        - EXPRESSION : Function with single return value (single output Port).
        - PREDICATE : Expression whose return value (output Port) is value type Boolean.
        - MODULE : Function with no Outer Ports and no contents.
        - ABSTRACT : (no contents) Primitive Function: GrometFN primitive, for abstracting in model role analysis.
        - LANGUAGE_PRIMITIVE : (no contents) Primitive Function: a source language primitive.
        - IMPORTED : (no contents) Function imported from another module.
            The **name** of an IMPORTED function will be the qualified name of the import.
              The qualified name includes the module path to the element being imported.
              E.g., "numpy.concatenate" is the qualified name for importing the concatenate function from numpy.
              If the element being imported is from an existing GROMET_FN_MODULE,
              then the qualified names ends in a colon followed by the integer,
              where the integer references the index in the GrometFNModule.attributes for
              the corresponding FN.
        - IMPORTED_METHOD : (no contents) A method call on an object derived from an imported module.
        - UNKNOWN_METHOD : (no contents)
            A method that **may** have already been defined OR is IMPORTED_METHOD.
            Use this type when there is ambiguity about whether it was already defined or imported.
        - LITERAL : Function LiteralValue with single return value (Port) and a value (no contents)

      allOf:
        - $ref: "#/components/schemas/GrometBox"
      type: object
      properties:

        function_type:
          $ref: "#/components/schemas/FunctionType"

        body:
          type: integer
          description: |
            The index to the FN in the parent GrometFNCollection.function_networks array.

        # When function_type is IMPORTED
        import_type:
          description: |
            When function_type is IMPORTED: the type of the import
          $ref: "#/components/schemas/ImportType"
        import_version:
          description: |
            When function_type is IMPORTED: the version of the resource being imported (e.g., "Numpy 1.23.0")
          type: string
        import_source:
          description: |
            When function_type is IMPORTED:
            A TypedValue that enables labeling what type of source the import_source refers to.
            The "type" is one of ImportSourceType, "value" is string representing the URI.
          $ref: "#/components/schemas/TypedValue"

        # When function_type is SOURCE or IMPORTED
        source_language:
          description: |
            When function_type is SOURCE or IMPORTED: The source language base name (e.g., "Python", "C", "Fortran")
          type: string
        source_language_version:
          description: |
            When function_type is SOURCE or IMPORTED: The version of the source language (e.g., "3.10.9")
          type: string

        # When function_type is LITERAL
        value:
          $ref: "#/components/schemas/LiteralValue"
          # description: Only present when function_type = LiteralValue

        # Place at end of properties so __init__ fn preserves positional arguments
        gromet_type:
          type: string
          default: "GrometBoxFunction"

    GrometBoxLoop:
      description: |
        FN Box Loop.
        __Loop execution semantics__:
        The Boolean output Port of the condition Predicate represents the
        loop *exit condition*.
        Loop execution starts by first evaluating the pre (aka 'init') Function,
        if it is available.
        The init Function is evaluated only during the first iteration through
        the loop.
        Next (and on every subsequent iteration), the loop condition Predicate
        is evaluated.
        If the continuation condition Port evaluates to False, then the current values
        at the input Ports to the Loop are copied to the output Ports and
        the execution moves past the Loop.
        Else, if the exit condition is False, then the values at the Outer
        Port Inputs are copied to the Loop body Input Ports, the body executes,
        and the resulting Output Ports of the body are copied to the Port
        Inputs (pil) of the loop and execution advances to the next round of Loop
        evaluation (which after the first iteration will go directly to evaluating
        the loop condition). <br>
        The Port Input (pil) Ports correspond 1-1 with Port Output (pol) Ports of
        the BoxLoop, as well as 1-1 with the Outer Port Input Ports (opi) and the
        Outer Port Output Ports (opo) of the GrometFNs that the loop pre, condition,
        body, and post reference. The 1-1 correspondence is enforced by the order
        of the Ports (e.g., if index 5 is the Port Input of the loop, then that
        same index will be the corresponding Port in the Port Output (pol) of the
        BoxLoop as well as the Outer Port Input (opi) and Outer Port Output (opo)
        of each of the pre, condition, body and post GrometFN).
      allOf:
        - $ref: "#/components/schemas/GrometBox"
      type: object
      properties:
        pre:
          type: integer
          description: |
            OPTIONAL.
            The index to the entry in the `fn_array` table of the GrometFNModule
            representing the GrometFN implementing the pre (aka 'init') (Function)
            of the Loop.
            This enables support of for-loops, where many languages have provided
            an extension to loops that have an initialization that is only in the
            scope of the loop, but not part of the loop body.
        condition:
          type: integer
          description: |
            The index to the entry in the `fn_array` table of the GrometFNModule
            representing the GrometFN implementing the condition (Predicate) of
            the Loop.
        body:
          type: integer
          description: |
            The index to the entry in the `fn_array` table of the GrometFNModule
            representing the GrometFN implementing the body (Function) of the Loop.
        post:
          type: integer
          description: |
            OPTIONAL.
            The index to the entry in the `fn_array` table of the GrometFNModule
            representing the GrometFN implementing the post-loop (Function) just
            prior to exiting the Loop.
            This is useful for representing control structures such as in Fortran
            where loop variable update is advanced one more step than what Python-style
            iterators support, and where that updated value is available outside
            the loop.

        # Place at end of properties so __init__ fn preserves positional arguments
        gromet_type:
          type: string
          default: "GrometBoxLoop"

    GrometBoxConditional:
      description: |
        FN Box Conditional.
        __Conditional execution semantics__:
        The Boolean output Port of the Conditional condition represents
        whether execution will proceed with the body_if (True) or the
        body_else (False). If there is no body_else and the condition is
        False, then the values at the Outer Port Input Ports are copied
        to the Outer Port Output Ports and execution moves past the
        Conditional.
      allOf:
        - $ref: "#/components/schemas/GrometBox"
      type: object
      properties:
        condition:
          type: integer
          description: |
            The index to the entry in the `fn_array` table of the GrometFNModule
            representing the GrometFN implementing the conditional condition.
        body_if:
          type: integer
          description: |
            The index to the entry in the `fn_array` table of the GrometFNModule
            representing the GrometFN implementing the IF-branch of the conditional.
        body_else:
          type: integer
          description: |
            The index to the entry in the `fn_array` table of the GrometFNModule
            representing the GrometFN implementing the ELSE-branch of the conditional.

        # Place at end of properties so __init__ fn preserves positional arguments
        gromet_type:
          type: string
          default: "GrometBoxConditional"
